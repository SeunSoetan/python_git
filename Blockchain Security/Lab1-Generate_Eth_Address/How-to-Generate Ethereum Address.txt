Lab 1: Vanity Ethereum Address
In a language of your choice, write a program to find a private key with a corresponding Ethereum address that starts with "0x1234".
Make sure you generate your private key safely!
Make sure your random number is actually a valid private key
HINT: Use the ethereumjs-util JavaScript package
Don't use the privateToAddress method. Instead, use privateToPublic and keccak256 so you demonstrate you understand the address generation process, and practice hashing and the use of buffers
Extra to think about: Assuming keccak256(x) is uniformly distributed, what is the probability your neighbour generates the same address as you?





Steps to generating an Ethereum Address. The address is derived from the public key. The public key is derived from the private key.

Step 1 generate random private key using randomebytes function. pass 32 bytes since all private keys are 32 bytes

 

Step 2: use ethereumjs-util’s privateToPublic function to generate public key. This will be 64 bytes.

 

Step 3: This step onwards we work towards generating a hex address from the  public key. 

3.1 hashOfPublicKey= use keccak256 to hash the public key we got in step 2. This is done to avoid using the public key directly on the blockchain. keccak will return a 32 byte hash (even though you pass a 64 byte public key as in input.)

 

3.2 last20bytesOfPublicHash= use slice() to separate the last 20 bytes of hashOfPublicKey from 3.1. Why? because all hex addresses are 20+1 bytes. The extra 1 byte will come from step 3.3

 

3.3. ethAddress= Convert last20bytesOfPublicHash from 3.2, from buffer datatype to hex string . And suffix that with ‘0x’. This 0x is 1 byte. making the hex address 21 bytes in total

 

Step 4: check if the hex address has the vanity digits we require. in this example its ‘1234’. It could be anything really.

If yes stop or else go back to step 1